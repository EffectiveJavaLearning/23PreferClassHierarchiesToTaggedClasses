/**
 * 有些类的实例包含两个或两个以上样式的实例，并包含一个标记字段指示实例样式。
 * 例如{@link TaggedFigure}，这个类把两种实例的样板搅合到一起，
 *      1.枚举声明、tag、switch语句等令可读性严重受损；
 *      2.由于装载时需要将不相干的东西装进来，因此内存占用增加；
 *      3.除非构造方法中继续增加不相干字段，否则无法将一些字段设为final，
 *          这又导致了后续版本中可能生成更多样式的实例，标签越来越多，
 *          继续影响可读性；
 *      4.如果无权更改源代码，那么使用者无法在枚举类中加标签，这又影响了可扩展性...
 *      5.实例的类型不包含任何有关其样式的信息，可读性继续降低
 *
 * 于是得出结论，应该用层次结构代替标签，将其中与枚举类型(样式)无关的方法和变量放到抽象类里面，
 * 然后继承出子类实现具体化。
 *
 * 对于{@link TaggedFigure}，可以这么改：{@link hierarchy.Figure}，从而提高可扩展性、
 * 避免操作无关成员变量、减少RuntimeException出现的可能性。比如，希望添加特殊矩形--正方形时，
 * 可以这样编写正方形类：{@link hierarchy.Square}
 *
 * *注：层次结构中的成员变量字段简洁起见未设置private型与getter&setter，但层次结构的各个类如果
 * 是public型的，那么访问权限必须修改。
 *
 * 总之，标签风格的代码最好不要用，考虑用层次结构代替它们。
 *
 * @author LightDance
 */
public class PreferClassHierarchiesToTaggedClasses {
}
